package com.example.test;

import com.example.test.models.Student;
import com.example.test.repos.StudentRepository;
import com.example.test.services.StudentService;
import org.junit.Before;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mockito.internal.verification.VerificationModeFactory.times;

@ExtendWith(MockitoExtension.class)
public class TestApplicationTests {
		Student student_1 = new Student();
		Student student_2 = new Student();

		@InjectMocks
		private StudentService studentService;

		@Mock
		private StudentRepository studentRepository;

		@BeforeEach
		public void setUp() {
			//MockitoAnnotations.initMocks(this);
			student_1.setName("John Doe");
			student_2.setName("Max Mix");
		}

		@Test
		public void testSaveStudent() {

			// Mock the behavior of the repository
			when(studentRepository.save(any(Student.class))).thenAnswer(invocation -> {
				Student savedStudent = invocation.getArgument(0);
				savedStudent.setId(1L); // Simulate the ID being generated by the database
				return savedStudent;
			});
			// call the service method
			Student savedStudent = studentService.saveStudent(student_1);

			assertNotNull(savedStudent);
			assertEquals("John Doe", savedStudent.getName());
			verify(studentRepository, times(1)).save(any(Student.class));
		}

		@Test
		public void testGetAllStudents() {
			// Arrange
			List<Student> mockStudents = Arrays.asList(
					student_1,
					student_2
			);

			// Mock the behavior of the repository
			when(studentRepository.findAll()).thenReturn(mockStudents);

			// Act
			List<Student> allStudents = studentService.getAllStudents();

			// Assert
			assertNotNull(allStudents);
			assertEquals(2, allStudents.size());

			// Verify that the repository's findAll method was called
			verify(studentRepository, times(1)).findAll();
		}
}

